From 0eb4fd18faab2da210d2bde4978733383614e5b8 Mon Sep 17 00:00:00 2001
From: Yang YuPeng <yypeng25@gmail.com>
Date: Wed, 9 Jul 2025 13:13:52 +0800
Subject: [PATCH] This is a new test

Signed-off-by: Yang YuPeng <yypeng25@gmail.com>
---
 Git/Git 使用.md       |  5 ++---
 Git/git send-email.md | 36 +++++++++++++++++++++++++++++++++++-
 Git/常见问题.md       |  4 ++++
 3 files changed, 41 insertions(+), 4 deletions(-)
 create mode 100644 Git/常见问题.md

diff --git a/Git/Git 使用.md b/Git/Git 使用.md
index 40f8988..cfb7574 100755
--- a/Git/Git 使用.md	
+++ b/Git/Git 使用.md	
@@ -1,8 +1,7 @@
-Git 进行版本控制时，配置分为三个级别
+Git 进行版本控制时，配置分为三个级别 ^3f1ed4
 - `--system`，系统级别，适用于系统上所有用户和仓库，`/etc/gitconfig`
 - `--global`，全局级别，适用于当前用户的所有仓库。`~/.gitconfig`
-- `--local`，仓库级别，仅适用于当前仓库。
-
+- `--local`，仓库级别，仅适用于当前仓库，`.git/config`。
 ### 连接本地存储库到GitHub上远程存储库
 ```bash
 $ git remote add origin repository-url
diff --git a/Git/git send-email.md b/Git/git send-email.md
index c15b800..598c3aa 100644
--- a/Git/git send-email.md	
+++ b/Git/git send-email.md	
@@ -10,7 +10,7 @@ git send-email --translate-aliases
 
 描述：
 获取命令行中输入的补丁并通过电子邮件发送出去。补丁可以指定为文件、目录（将发送目录中的所有文件）或直接以修订列表的形式发送。
-> 直接以修订列表形式发送含义：直接通过指定 Git 修订版本范围来让 `git send-email` 内部生成并发送。`git send-email` 能否理解并支持 `git format-patch` 的所有 `<revision range>` 和选项。
+> 直接以修订列表形式发送含义：直接通过指定 Git 修订版本范围来让 `git send-email` 内部生成并发送。`git send-email` 能理解并支持 `git format-patch` 的所有 `<revision range>` 和选项。
 > 如：
 > ```bash
 > git send-email -1 --to="recipient@example.com"  --cc="cc@example.com"
@@ -20,5 +20,39 @@ git send-email --translate-aliases
 > `--cc="cc@example.com`：指定邮件的抄送人
 > 幕后：`git send-email` 会在内部调用 `git format-patch -1` 来生成关于你最近一次提交的补丁，然后用这个补丁来构建并发送一封电子邮件。邮件的主题和正文会根据提交信息自动生成。
 
+两种方式指定电子邮件主题（Subject）：
+- 命令行选项：可以在运行命令时通过 `--subject/-s [Subject Description]` 选项直接指定邮件标题。
+- 交互式界面提示用户输入标题。如下：
+```bash
+git send-email --to your-mailing-list@example.com 0001-my-patch.patch
+Subject: [Subject Description that you should complete]
+```
+
+
+在 Git 和 `git send-email` 的上下文中，有如下邮箱地址：
+
 
+1. `user.email` （Git 提交作者/提交者邮箱）：该邮箱是通过 `git config user.email` 设置的邮箱。该邮箱地址会出现在 Git 提交（`commit`）信息中，作为作者（Author）和提交者（`Committer`）的身份。是 Git 仓库内部记录的身份。
+2. `sendemail.from`（邮件`From:`头部）：这是 `git send-email` 发送邮件时，邮件的 `From:` 头部显示的邮箱地址。这是邮件客户端看到的发件人地址。
+3. `sendemail.smtpUser`（SMTP 认证用户名）：用于 SMTP 服务器认证的用户名，通常是邮箱账户地址，用于实际登录 SMTP 服务器发送邮件。
+4. `--to, --cc, --bcc`（邮件收件人，抄送，密送）
 
+如何设置？
+`git send-email` 默认会尝试使用你的 `user.email` 作为邮件的 `From:` 地址。但是，可通过如下方式明确指定不同的发件人地址：
+1. 通过命令行选项 `--from` 指定：
+```bash
+git send-email --from "Your Name <Another.email@example.com>" --to mailinglist@example.com 000x-patch.patch
+```
+这样，邮件的 `From:` 头部将显示为 `Your Name <Another.email@example.com>` 。而你用于 SMTP 认证的账户可以是不同的。
+
+2. 通过 `sendemail.from` 配置项指定
+```TOML
+[sendemail]
+    from = Another.email@example.com
+    smtpServer = smtp.gmail.com
+    smtpServerPort = 587
+    smtpEncryption = tls
+    smtpUser = your-gmail-account@gmail.com
+    smtpPass = your-app-password
+```
+这样，邮件的 `From:` 头部将为 `Another.email@example.com`，而实际登录 Gmail SMTP 服务器进行发送的账户是 `your-gmail-account@gmail.com`；实际的 Git 提交（由 `user.email` 控制）可以继续是另一个地址。
\ No newline at end of file
diff --git a/Git/常见问题.md b/Git/常见问题.md
new file mode 100644
index 0000000..8401383
--- /dev/null
+++ b/Git/常见问题.md
@@ -0,0 +1,4 @@
+1. 如何切换提交邮箱？
+首先，Git 的配置是分层级的，后一层级的配置会覆盖前一层级的。[[Git 使用#^3f1ed4]]
+可以通过在仓库级（`--local`）设置 `user.name` 和 `user.email` 来覆盖全局级（`--global`）的设置。
+修改 `.git/config` 文件，通过命令 `git config --list --local` 验证当前仓库使用的邮箱。
\ No newline at end of file
-- 
2.43.0

